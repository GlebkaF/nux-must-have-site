import { encodeDefaultChain, encodeChainToBytes, debugEncoding } from './lib/core/encoder';
import { createDefaultChain } from './lib/core/helpers/create-default-chain';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–≥–æ —ç–Ω–∫–æ–¥–µ—Ä–∞
 */

console.log('üé∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–Ω–∫–æ–¥–µ—Ä–∞...');

// –¢–µ—Å—Ç 1: –≠–Ω–∫–æ–¥–∏–Ω–≥ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —á–µ–π–Ω–∞
console.log('\nüìã –¢–µ—Å—Ç 1: –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–µ–π–Ω');
const defaultChain = createDefaultChain();
console.log('–î–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–µ–π–Ω:', JSON.stringify(defaultChain, null, 2));

const encoded = encodeDefaultChain();
console.log('\nüî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–Ω–∫–æ–¥–∏–Ω–≥–∞:');
console.log('–ë–∞–π—Ç–æ–≤ –≤—Å–µ–≥–æ:', encoded.bytes.length);
console.log('–ù–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–π—Ç–æ–≤:', encoded.bytes.filter(b => b !== 0).length);
console.log('QR –∫–æ–¥ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤):', encoded.qrCode.substring(0, 100) + '...');

// –¢–µ—Å—Ç 2: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('\nüîç –¢–µ—Å—Ç 2: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
const debugInfo = debugEncoding(defaultChain);
console.log('–ù–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–π—Ç—ã:');
debugInfo.debug.forEach(item => {
  console.log(`  –ò–Ω–¥–µ–∫—Å ${item.index}: ${item.value} (${item.description})`);
});

// –¢–µ—Å—Ç 3: –ö–∞—Å—Ç–æ–º–Ω—ã–π —á–µ–π–Ω
console.log('\nüéõÔ∏è –¢–µ—Å—Ç 3: –ö–∞—Å—Ç–æ–º–Ω—ã–π —á–µ–π–Ω');
const customChain = createDefaultChain();
// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
customChain.amplifier.params.Gain = 75;
customChain.amplifier.params.Master = 80;
customChain.effect.params.Output = 90;
customChain.reverb.enabled = false; // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–≤–µ—Ä–±

const customEncoded = encodeChainToBytes(customChain);
console.log('–ö–∞—Å—Ç–æ–º–Ω—ã–π —á–µ–π–Ω —ç–Ω–∫–æ–¥–∏—Ä–æ–≤–∞–Ω');
console.log('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö:');

// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
encoded.bytes.forEach((defaultByte, index) => {
  const customByte = customEncoded.bytes[index];
  if (defaultByte !== customByte) {
    console.log(`  –ò–Ω–¥–µ–∫—Å ${index}: ${defaultByte} ‚Üí ${customByte}`);
  }
});

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR –∫–æ–¥–∞
console.log('\nüì± –¢–µ—Å—Ç 4: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ QR –∫–æ–¥–∞');
console.log('–î–ª–∏–Ω–∞ QR –∫–æ–¥–∞:', encoded.qrCode.length);
console.log('QR –∫–æ–¥ —Ä–∞–∑–±–∏—Ç –ø–æ –±–ª–æ–∫–∞–º:');
const qrChunks = encoded.qrCode.match(/.{1,30}/g) || [];
qrChunks.forEach((chunk, index) => {
  console.log(`  –ß–∞—Å—Ç—å ${index + 1}: ${chunk}`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏–ª–∏ Node.js
export {
  encodeDefaultChain,
  encodeChainToBytes,
  debugEncoding,
  createDefaultChain
};