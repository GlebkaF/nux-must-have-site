/* eslint-disable @typescript-eslint/typedef */
/* eslint-disable @typescript-eslint/restrict-template-expressions */
import React, { useState, useEffect } from 'react';
import { encodeDefaultChain, debugEncoding } from '../lib/core/encoder';
import { createDefaultChain } from '../lib/core/helpers/create-default-chain';

interface DebugItem {
  index: number;
  value: number;
  description: string;
}

export default function TestEncoderPage(): React.ReactElement {
  const [defaultChain, setDefaultChain] = useState<ReturnType<typeof createDefaultChain> | null>(null);
  const [qrCode, setQrCode] = useState<string>('');
  const [bytes, setBytes] = useState<number[]>([]);
  const [debugInfo, setDebugInfo] = useState<DebugItem[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  useEffect(() => {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–µ–π–Ω
      const chain = createDefaultChain();
      setDefaultChain(chain);

      // –≠–Ω–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ
      const encoded = encodeDefaultChain();
      setQrCode(encoded.qrCode);
      setBytes(encoded.bytes);

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const debug = debugEncoding(chain);
      setDebugInfo(debug.debug);

      setIsLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–Ω–∫–æ–¥–∏–Ω–≥–µ:', error);
      setIsLoading(false);
    }
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-lg text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —ç–Ω–∫–æ–¥–µ—Ä–∞...</p>
        </div>
      </div>
    );
  }

  const nonZeroBytes = bytes.filter(b => b !== 0);
  const enabledBlocks = defaultChain ? Object.values(defaultChain).filter(block => block.enabled) : [];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            üé∏ Chain Encoder Test
          </h1>
          <p className="text-lg text-gray-600">
            –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–Ω–∫–æ–¥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ–π–Ω–∞ –≤ QR –∫–æ–¥
          </p>
        </div>

        {/* Info Card */}
        <div className="bg-blue-50 border-l-4 border-blue-400 p-6 mb-8 rounded-r-lg">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-blue-700">
                <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> –≠—Ç–æ—Ç —ç–Ω–∫–æ–¥–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–µ–π–Ω —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–∑{' '}
                <code className="bg-blue-100 px-2 py-1 rounded">create-default-chain.ts</code>, 
                –º–∞–ø–∏—Ç –µ–≥–æ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑{' '}
                <code className="bg-blue-100 px-2 py-1 rounded">config.ts</code>{' '}
                –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è QR –∫–æ–¥–∞. –ö–æ–Ω—Ñ–∏–≥ —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–π—Ç–æ–≤.
              </p>
            </div>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow-md p-6 text-center">
            <div className="text-3xl font-bold text-blue-600">{bytes.length}</div>
            <div className="text-sm text-gray-600 mt-1">–í—Å–µ–≥–æ –±–∞–π—Ç–æ–≤</div>
          </div>
          <div className="bg-white rounded-lg shadow-md p-6 text-center">
            <div className="text-3xl font-bold text-green-600">{nonZeroBytes.length}</div>
            <div className="text-sm text-gray-600 mt-1">–ù–µ–Ω—É–ª–µ–≤—ã—Ö –±–∞–π—Ç–æ–≤</div>
          </div>
          <div className="bg-white rounded-lg shadow-md p-6 text-center">
            <div className="text-3xl font-bold text-purple-600">{qrCode.length}</div>
            <div className="text-sm text-gray-600 mt-1">–î–ª–∏–Ω–∞ QR –∫–æ–¥–∞</div>
          </div>
          <div className="bg-white rounded-lg shadow-md p-6 text-center">
            <div className="text-3xl font-bold text-orange-600">{enabledBlocks.length}</div>
            <div className="text-sm text-gray-600 mt-1">–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤</div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Default Chain JSON */}
          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            <div className="bg-gray-50 px-6 py-4 border-b">
              <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                üìã –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–µ–π–Ω (JSON)
              </h2>
            </div>
            <div className="p-6">
              <pre className="bg-gray-100 p-4 rounded-lg overflow-x-auto text-sm max-h-96 overflow-y-auto">
                {JSON.stringify(defaultChain, null, 2)}
              </pre>
            </div>
          </div>

          {/* QR Code */}
          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            <div className="bg-gray-50 px-6 py-4 border-b">
              <h2 className="text-xl font-semibold text-gray-900 flex items-center">
                üì± QR –∫–æ–¥ (—Å—Ç—Ä–æ–∫–∞)
              </h2>
            </div>
            <div className="p-6">
              <div className="bg-green-50 border-2 border-green-200 p-4 rounded-lg">
                <code className="text-xs break-all leading-relaxed font-mono">
                  {qrCode}
                </code>
              </div>
              <div className="mt-4 text-sm text-gray-600">
                <p><strong>–î–ª–∏–Ω–∞:</strong> {qrCode.length} —Å–∏–º–≤–æ–ª–æ–≤</p>
                <p><strong>–§–æ—Ä–º–∞—Ç:</strong> –ö–∞–∂–¥—ã–π –±–∞–π—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω 3 —Ü–∏—Ñ—Ä–∞–º–∏</p>
              </div>
            </div>
          </div>
        </div>

        {/* Bytes Visualization */}
        <div className="mt-8 bg-white rounded-lg shadow-md overflow-hidden">
          <div className="bg-gray-50 px-6 py-4 border-b">
            <h2 className="text-xl font-semibold text-gray-900 flex items-center">
              üî¢ –ë–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
            </h2>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-10 gap-2 text-xs font-mono">
              {bytes.map((byte, index) => {
                const isNonZero = byte !== 0;
                const isHeader = debugInfo.some(item => item.index === index && item.description.startsWith('Head_'));
                
                return (
                  <div
                    key={index}
                    className={`
                      p-2 text-center rounded border transition-all duration-200
                      ${isNonZero 
                        ? isHeader 
                          ? 'bg-yellow-100 border-yellow-400 font-bold text-yellow-800' 
                          : 'bg-green-100 border-green-400 font-bold text-green-800'
                        : 'bg-gray-50 border-gray-200 text-gray-500'
                      }
                    `}
                    title={`Index ${index}: ${byte} ${debugInfo.find(item => item.index === index)?.description || ''}`}
                  >
                    {index}:{byte}
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        {/* Debug Table */}
        <div className="mt-8 bg-white rounded-lg shadow-md overflow-hidden">
          <div className="bg-gray-50 px-6 py-4 border-b">
            <h2 className="text-xl font-semibold text-gray-900 flex items-center">
              üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–π—Ç—ã)
            </h2>
          </div>
          <div className="p-6">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ò–Ω–¥–µ–∫—Å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –ó–Ω–∞—á–µ–Ω–∏–µ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –û–ø–∏—Å–∞–Ω–∏–µ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      –¢–∏–ø
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {debugInfo.map((item) => (
                    <tr key={item.index} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                        {item.index}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                        {item.value}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                        {item.description}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <span className={`
                          inline-flex px-2 py-1 text-xs font-semibold rounded-full
                          ${item.description.startsWith('Head_') 
                            ? 'bg-yellow-100 text-yellow-800' 
                            : 'bg-green-100 text-green-800'
                          }
                        `}>
                          {item.description.startsWith('Head_') ? 'Header' : 'Parameter'}
                        </span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="mt-8 text-center text-sm text-gray-500">
          <p>
            ‚úÖ –≠–Ω–∫–æ–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç <code>config.ts</code> –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–π—Ç–æ–≤
          </p>
        </div>
      </div>
    </div>
  );
}